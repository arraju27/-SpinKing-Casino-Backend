// SpinKing - Simple Casino MVP Demo with Login/Register/Admin import React, { useState } from "react";

export default function SpinKing() { const [user, setUser] = useState(null); const [email, setEmail] = useState(""); const [password, setPassword] = useState(""); const [isRegistering, setIsRegistering] = useState(false); const [users, setUsers] = useState([]); const [balance, setBalance] = useState(100); const [spinResult, setSpinResult] = useState(null); const [message, setMessage] = useState("");

const isAdmin = user?.email === "admin@spinking.com";

const handleAuth = () => { if (!email || !password) { alert("Please enter email and password"); return; } const mockUser = { email, balance: 100 }; setUser(mockUser); setBalance(100); setUsers((prev) => { const exists = prev.find((u) => u.email === email); return exists ? prev : [...prev, mockUser]; }); };

const spinWheel = () => { if (balance < 10) { setMessage("Not enough balance to spin. Minimum 10 needed."); return; } setBalance(balance - 10); const outcome = Math.floor(Math.random() * 100); let winAmount = 0; if (outcome < 50) winAmount = 0; else if (outcome < 80) winAmount = 15; else if (outcome < 95) winAmount = 30; else winAmount = 100;

setSpinResult(winAmount);
setBalance(balance - 10 + winAmount);
setMessage(`You won ${winAmount} coins!`);

};

const updateUserBalance = (email, amount) => { setUsers((prev) => prev.map((u) => u.email === email ? { ...u, balance: u.balance + amount } : u ) ); };

const handleLogout = () => { setUser(null); setEmail(""); setPassword(""); };

if (!user) { return ( <div className="min-h-screen bg-gradient-to-b from-gray-900 to-black text-white flex flex-col items-center justify-center p-4"> <h1 className="text-4xl font-bold mb-6">SpinKing Casino</h1> <div className="bg-gray-800 p-6 rounded-2xl shadow-lg w-full max-w-md"> <h2 className="text-2xl mb-4 font-semibold">{isRegistering ? "Register" : "Login"}</h2> <input type="email" placeholder="Email" value={email} onChange={(e) => setEmail(e.target.value)} className="w-full mb-3 px-4 py-2 rounded-xl text-black" /> <input type="password" placeholder="Password" value={password} onChange={(e) => setPassword(e.target.value)} className="w-full mb-4 px-4 py-2 rounded-xl text-black" /> <button
onClick={handleAuth}
className="w-full bg-yellow-500 hover:bg-yellow-400 text-black font-bold py-2 px-4 rounded-2xl mb-3"
> {isRegistering ? "Register" : "Login"} </button> <p className="text-sm text-center"> {isRegistering ? "Already have an account?" : "Don't have an account?"} {" "} <span onClick={() => setIsRegistering(!isRegistering)} className="text-blue-400 hover:underline cursor-pointer" > {isRegistering ? "Login" : "Register"} </span> </p> </div> </div> ); }

if (isAdmin) { return ( <div className="min-h-screen bg-black text-white p-6"> <h1 className="text-3xl font-bold mb-4">Admin Panel - SpinKing</h1> <button
onClick={handleLogout}
className="mb-6 bg-red-600 hover:bg-red-500 px-4 py-2 rounded-xl"
> Logout </button> <table className="w-full text-left border border-gray-700"> <thead> <tr className="bg-gray-800"> <th className="px-4 py-2">Email</th> <th className="px-4 py-2">Balance</th> <th className="px-4 py-2">Actions</th> </tr> </thead> <tbody> {users.map((u, i) => ( <tr key={i} className="border-t border-gray-700"> <td className="px-4 py-2">{u.email}</td> <td className="px-4 py-2">{u.balance}</td> <td className="px-4 py-2 flex gap-2"> <button onClick={() => updateUserBalance(u.email, 10)} className="bg-green-600 hover:bg-green-500 px-2 py-1 rounded" > +10 </button> <button onClick={() => updateUserBalance(u.email, -10)} className="bg-yellow-600 hover:bg-yellow-500 px-2 py-1 rounded" > -10 </button> </td> </tr> ))} </tbody> </table> </div> ); }

return ( <div className="min-h-screen bg-gradient-to-b from-gray-900 to-black text-white flex flex-col items-center justify-center p-4"> <h1 className="text-4xl font-bold mb-6">Welcome, {user.email}</h1>

<div className="bg-gray-800 p-6 rounded-2xl shadow-lg w-full max-w-md">
    <p className="text-xl mb-4">Balance: <span className="font-bold">{balance} coins</span></p>

    <button
      onClick={spinWheel}
      className="bg-yellow-500 hover:bg-yellow-400 text-black font-bold py-2 px-4 rounded-2xl transition-all duration-300"
    >
      Spin the Wheel (-10)
    </button>

    {spinResult !== null && (
      <p className="mt-4 text-lg">{message}</p>
    )}

    <div className="mt-6 flex gap-4">
      <button className="bg-blue-600 hover:bg-blue-500 px-4 py-2 rounded-xl">Deposit</button>
      <button className="bg-green-600 hover:bg-green-500 px-4 py-2 rounded-xl">Withdraw</button>
    </div>

    <button
      onClick={handleLogout}
      className="mt-6 bg-red-600 hover:bg-red-500 px-4 py-2 rounded-xl w-full"
    >
      Logout
    </button>
  </div>
</div>

); }

